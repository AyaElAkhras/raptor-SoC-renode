** This file contains some of the tips I explored in the process of developing peripherals for raptor-SoC.. They could be helpful for any developer willing to add support for their SoC in Renode.. 


1) To allow the CPU to access the developed peripherals, Renode provides various interfaces that define methods allowing for CPU access. These fall under the family of `IBusPeripheral` interfaces which can be found in the following directory:
      renode/src/Infrastructure/src/Emulator/Main/Peripherals/Bus
There are 3 types of these interfaces IBytePeripheral (for 8 bit access), IWordPeripheral (for 16 bit access) and IDoubleWordPeripheral (for 32 bit access) varying in access width but all providing the following pair of methods:
      uint ReadDoubleWord(long offset);
      void WriteDoubleWord(long offset, uint value);


2) Renode provides a base class for each peripheral to inherit from. Each peripheral has its base class file in a separate directory under the following path:
    renode/src/Infrastructure/src/Emulator/Main/Peripherals/
If the desired peripheral isn't found among those under that path, then BasicDoubleWordPeripheral can be used as it will provide basic methods.   


3) For defining and mapping registers, an enum called `Registers` (a convention understood by the logging system) is created lsiting all the registers in a peripheral with their addresses. 
Inside the constructor of your peripheral class, create a dictionary of registers that maps the Register's fields to DoubleWordRegister..
This dictionary will then be used as a constructor parameter for a DoubleWordRegisterCollection object. This class can be found in the following file:
      renode/src/Infrastructure/src/Emulator/Main/Core/Structure/Registers/RegisterCollection.cs
The DoubleWordRegisterCollection object provides Reset, Read, Write methods that are used to implement WriteDoubleWord/ ReadDoubleWord methods.   

4) Base classes provide reset methods that could be overridden inside your peripheral class to reset the registers or update the interrupts. 

